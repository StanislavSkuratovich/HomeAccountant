@page "/records/edit/{id}";
@inject IUnitOfWork _unit;
@inject NavigationManager _navigator;
<h3>Edit</h3>
<button @onclick="BackToList">Back to list</button>
@if (record == null)
{
    <LoadingMessage Message="loading record.."></LoadingMessage>
}
else
{
    <EditForm Model="record" OnValidSubmit="EditRecord">
        <div class="form-group">
            <label for="amount">Amount</label>
            <InputNumber @bind-Value="record.Amount" class="form-control" id="firstname"></InputNumber>
        </div>
        <div class="form-group">
            <label for="date">Date</label>
            <InputDate @bind-Value="record.Date" class="form-control" id="date"></InputDate>
        </div>
    </EditForm>
}




@code {
    [Parameter]
    public string id { get; set; }
    private MoneyChangeRecord record = new MoneyChangeRecord();
    protected async override Task OnInitializedAsync()
    {
        //record = await _repo.GetAsync(url: EndPoints.Records, Convert.ToInt32(id));//todo
        //record = await _repo.GetAsync(Convert.ToInt32(id));//todo
        record = await _unit.MoneyChangeRecords.GetAsync(Convert.ToInt32(id));//todo
    }
    private void BackToList()
    {
        _navigator.NavigateTo("/records/");
    }
    private async Task EditRecord()
    {
        var parcedId = Convert.ToInt32(id);
        //var result = await _repo.UpdateAsync(url: EndPoints.Records, entity: record, parcedId);
        //var result = await _repo.UpdateAsync(entity: record, parcedId);
        var result = await _unit.MoneyChangeRecords.UpdateAsync(entity: record, parcedId);
    }
}
