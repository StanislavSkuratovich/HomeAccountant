@page "/records/Create"
@inject NavigationManager _navigator;
@inject IUnitOfWork _unit;

@if (null == _changeTypes || null == _appUsers) 
{
    <LoadingMessage Message="Loading data.."></LoadingMessage>
}
else 
{ 
<div class="card">
    <div class="card-body">
        <h3 class="card-title">Add new record</h3>
        <EditForm Model="_changeRecord" OnSubmit="HandleCreation">
            <div class="form-group">
                <label for="Amount" class="form-label">Enter an amount</label>
                <InputNumber Id="amount" class="form-control" @bind-Value="_changeRecord.Amount" />
            </div>
            <div class="form-group">
                Select user
                <select @bind="_changeRecord.UserId">
                    @foreach (var item in _appUsers)
                    {
                        <option value="@item.Id">@item.UserName</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="date">Date</label>
                <InputDate @bind-Value="_changeRecord.Date" class="form-control" id="date"></InputDate>
            </div>
            <div class="form-group">
                Select a type 
                <select @bind="_changeRecord.MoneyChangeTypeId">
                    @foreach (var item in _changeTypes)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary" type="submit">
                <span class="oi oi-pencil"></span>
                Submit Changes
            </button>
        </EditForm>
    </div>
</div>

}
@code {
    private MoneyChangeRecord _changeRecord = new MoneyChangeRecord();
    private IEnumerable<AppUser> _appUsers = new List<AppUser>();
    private IEnumerable<MoneyChangeType> _changeTypes = new List<MoneyChangeType>();
    private async Task HandleCreation()//todo validation
    {
        var responce = await _unit.MoneyChangeRecords.AddAsync(_changeRecord);
        _navigator.NavigateTo("/records/");
    }
    protected async override Task OnInitializedAsync()
    {
        _appUsers = await _unit.AppUsers.GetAllAsync();
        _changeTypes = await _unit.MoneyChangeTypes.GetAllAsync();

    }

}
